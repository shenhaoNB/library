#Makefile
#ARMGNU 想在x86上编译arm64的代码，就需要这个交叉编译的前缀。
ARMGNU ?= aarch64-linux-gnu
#当编译c 和 汇编代码
#-wall warning all
#-nostdlib 不使用标准库，大多数调用标准库的都需要与os交互，我们在写一个简单的程序。不需要任何OS。
#-nostartfiles 不使用startup文件，startup文件的责任是设定一个栈指针，初始化静态变量，并且跳转到main函数进口点，但我们打算什么都自己做！
#-ffreestanding 标准库不存在了环境，startup有没有之前的意义，就是告诉编译器标准函数失去了通常的意义
#Iinclude
#mgeneral-regs-only 使用通用的寄存器，因为ARM还有NEON，我们不想让编译器用这个玩意。
COPS = -Wall -nostdlib -nostartfiles -ffreestanding -Iinclude -mgeneral-regs-only
ASMOPS = -Iinclude 
#build里都是.o files
BUILD_DIR = build
SRC_DIR = src
#上面都是变量定义，两个target，all作为第一个默认的target。
all : kernel8.img

clean :
    rm -rf $(BUILD_DIR) *.img 
#接下来是为了编译c和汇编，比如我们src里有foo.c foo.s 我们会生成 build/foo_c.o & build/foo_s.o
#个别的 $< $@是运行的时候被输入取代，并且以filename输出，
$(BUILD_DIR)/%_c.o: $(SRC_DIR)/%.c
    mkdir -p $(@D)
    $(ARMGNU)-gcc $(COPS) -MMD -c $< -o $@

$(BUILD_DIR)/%_s.o: $(SRC_DIR)/%.S
    $(ARMGNU)-gcc $(ASMOPS) -MMD -c $< -o $@
#这里我们构建一个由C和汇编源文件串联创建的所有目标文件（OBJ_FILES）的数组。
C_FILES = $(wildcard $(SRC_DIR)/*.c)
ASM_FILES = $(wildcard $(SRC_DIR)/*.S)
OBJ_FILES = $(C_FILES:$(SRC_DIR)/%.c=$(BUILD_DIR)/%_c.o)
OBJ_FILES += $(ASM_FILES:$(SRC_DIR)/%.S=$(BUILD_DIR)/%_s.o)
#如果想看我们如何定义c和汇编文件的编译目标，你会注意到我使用了 -MMD，此参数之指示了gcc编译器为每个
#生成的目标文件创建依赖项，这些依赖项一般都是一堆头文件，我们需要含所有生成的依赖项文件，以便make知道
#在标题更改时要重新编译的确切内容。
DEP_FILES = $(OBJ_FILES:%.o=%.d)
-include $(DEP_FILES)
#我们使用OBJ_FILES 数组去build kernel8_dlf文件，我们使用链接脚本去定义可执行img的基本布局
#kernl.elf 是ELF格式，问题是ELF对OS来说可执行的。我们需要从这个img里提取可执行部分和数据。
#kernel8 这个8 指的是armv8，告诉固件启动处理器在64bit模式启动（通过config.txt arm_control=0x200
#RPi OS以前使用过这种方法，你仍然可以在一些练习答案中找到它。 但是，arm_control标志是未记录的，最好使用kernel8.img命名约定。
kernel8.img: $(SRC_DIR)/linker.ld $(OBJ_FILES)
    $(ARMGNU)-ld -T $(SRC_DIR)/linker.ld -o $(BUILD_DIR)/kernel8.elf  $(OBJ_FILES)
    $(ARMGNU)-objcopy $(BUILD_DIR)/kernel8.elf -O binary kernel8.img
The linker script    
#链接脚本最初的意图是为了描述section怎么把输入的目标文件关联到输出文件，https://sourceware.org/binutils/docs/ld/Scripts.html#Scripts
SECTIONS
{
    .text.boot : { *(.text.boot) }
    .text :  { *(.text) }
    .rodata : { *(.rodata) }
    .data : { *(.data) }
    . = ALIGN(0x8);
    bss_begin = .;
    .bss : { *(.bss*) } 
    bss_end = .;
}
#在startup之后，rasp会装载kernel8.img到储存器，在文件的开头开始执行，这就是为什么 .text.boot在前面，我们打算把OS startup代码也
#放进这个section。.text .rodata .data包含内核编译指令，只读数据，和一般数据。.bss 里的数据被初始化为0，通过把数据放到各自的分区，
#编译器会在ELF binary里存放一些空间，elf的头文件存放section的大小，但该部分本身被省略。 将img加载到内存后，我们必须将.bss部分初始化为0; 
#这就是为什么我们需要记录该section的开始和结束（因此bss_begin和bss_end符号）并对齐该部分，使其从一个8的倍数开始。如果该部分未对齐，则会更多
# 难以使用str指令在bss部分的开头存储0，因为str指令只能用于8字节对齐的地址。

Booting the kernel

boot.S 它包含了kernel startup 代码
#include "mm.h"

.section ".text.boot"
#首先，我门指定所有boot.s的定义都应该在 .text.boot section里，先前，我们也看到它通过链接脚本被放置在kernel的开头，所以当kernel起来的时候
#下面的函数会启用：

.globl _start
_start:
    mrs    x0, mpidr_el1        
    and    x0, x0,#0xFF        // Check processor id
    cbz    x0, master        // Hang for all non-primary CPU
    b    proc_hang
#函数第一个和功能是检查处理器的ID，rasp有四个核心，在设备上电以后，每个核心都会启动相同的代码，然而我门不想在四个核心上工作我想
#在第一个上工作，把所有其他核心放在无限循环中。实际上 _start 责任如此。 从 mpidr_el1系统寄存器 得到处理器ID，如果ID为0，该程序4
#会被传输到master函数上
proc_hang: 
    b proc_hang

master:
    adr    x0, bss_begin
    adr    x1, bss_end
    sub    x1, x1, x0
    bl     memzero

    mov    sp, #LOW_MEMORY
    bl    kernel_main
#这里我可以清除 .bss 通过调用 memzero.我门随后定义这个函数。在armv8中，按照惯例，前七个参数会被传送到被调用函数，传送的方式是通过 x0 - x6 寄存器。
#memzero 仅仅访问前两个参数， bss_begin 是开始地址， section会被清空（bss_end - bss_begin ）
#通过清除 .bss，我门初始化stack指针，并且把可执行程序传给 kernel-main 函数。rasp 在地址 0 装在 kernel ，这也是为什么stack 指针可以被设置到任何
#一个足够高的地址，以至于当stack增长到足够大时，stack也不会覆盖kernel img。
#LOW_MEMORY 被定义在 mm.h 并且等于4M 我门的kernel stack不会增长的非常大，kernel也比较小，4M足够用

#下面是 arm 汇编

mrs Load value from a system register to one of the general purpose registers (x0–x30)
and Perform the logical AND operation. We use this command to strip the last byte from the value we obtain from the mpidr_el1 register.
cbz Compare the result of the previously executed operation to 0 and jump (or branch in ARM terminology) to the provided label if the comparison yields true.
b Perform an unconditional branch to some label.
adr Load a label's relative address into the target register. In this case, we want pointers to the start and end of the .bss region.
sub Subtract values from two registers.
bl "Branch with a link": perform an unconditional branch and store the return address in x30 (the link register). When the subroutine is finished, use the ret instruction to jump back to the return address.
mov Move a value between registers or from a constant to a register.

The kernel_main function

#include "mini_uart.h"

void kernel_main(void)
{
    uart_init();
    uart_send_string("Hello, world!\r\n");

    while (1) {
        uart_send(uart_recv());
    }
}






